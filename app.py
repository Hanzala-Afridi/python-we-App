# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bXTlGc-RaX3z_ZU22gu3xO33eIXWnjZI
"""

pip install streamlit pandas

import streamlit as st
import pandas as pd
import os
from io import BytesIO

# Page configuration
st.set_page_config(page_title="Data Sweeper", layout="wide")

# Title
st.title("Data Sweeper")
st.write("My app can transform your files between CSV and Excel formats with built-in data cleaning and visualization.")

# File uploader
uploaded_files = st.file_uploader("Upload your files (CSV or Excel)", type=["csv", "xlsx"], accept_multiple_files=True)

if uploaded_files:
    for file in uploaded_files:
        st.subheader(f"File: {file.name}")

        # Get file extension
        file_extension = os.path.splitext(file.name)[-1].lower()

        # Read file into a DataFrame
        if file_extension == ".csv":
            df = pd.read_csv(file)
        elif file_extension == ".xlsx":
            df = pd.read_excel(file)
        else:
            st.error(f"Unsupported file type: {file_extension}")
            continue

        # Display file info
        st.write(f"File size: {file.size / 1024:.2f} KB")
        st.write("Preview of the data:")
        st.dataframe(df.head())

        # Data cleaning options
        st.subheader("Data Cleaning Options")
        clean_data = st.checkbox(f"Clean data for {file.name}")

        if clean_data:
            col1, col2 = st.columns(2)

            # Remove duplicates
            if col1.button(f"Remove duplicates from {file.name}"):
                df.drop_duplicates(inplace=True)
                st.success("Duplicates removed!")

            # Fill missing values
            if col2.button(f"Fill missing values for {file.name}"):
                numeric_columns = df.select_dtypes(include=["number"]).columns
                df[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].mean())
                st.success("Missing values filled!")

        # Select columns to keep
        st.subheader("Select Columns to Convert")
        columns_to_keep = st.multiselect(f"Choose columns for {file.name}", df.columns, default=df.columns.tolist())
        df = df[columns_to_keep]

        # Data visualization
        st.subheader("Data Visualization")
        show_visualization = st.checkbox(f"Show visualization for {file.name}")

        if show_visualization:
            numeric_columns = df.select_dtypes(include=["number"]).columns
            if len(numeric_columns) >= 2:
                st.bar_chart(df[numeric_columns].iloc[:, :2])
            else:
                st.warning("Need at least 2 numeric columns for visualization.")

        # File conversion
        st.subheader("Conversion Options")
        conversion_type = st.radio(f"Convert {file.name} to:", ["CSV", "Excel"])

        if st.button(f"Convert {file.name}"):
            buffer = BytesIO()
            if conversion_type == "CSV":
                df.to_csv(buffer, index=False)
                mime_type = "text/csv"
                file_extension = ".csv"
            else:
                df.to_excel(buffer, index=False)
                mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                file_extension = ".xlsx"

            buffer.seek(0)
            st.download_button(
                label=f"Download {file.name}{file_extension}",
                data=buffer,
                file_name=f"{os.path.splitext(file.name)[0]}{file_extension}",
                mime=mime_type
            )
            st.success("File processed successfully!")

!npm install localtunnel
!streamlit run /content/your_app.py &>/content/logs.txt &
!npx localtunnel --port 8501